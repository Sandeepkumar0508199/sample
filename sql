-- =============================================================================
-- CPAD Analytics Environment - Useful SQL Query Commands
-- Based on CPAD Project Documentation
-- =============================================================================

-- -----------------------------------------------------------------------------
-- 1. SURVEILLANCE RUN MANAGEMENT
-- -----------------------------------------------------------------------------

-- Check current surveillance runs
SELECT 
    SurvRunId,
    SurveillanceId,
    BatchId,
    RunStatus,
    StartTime,
    EndTime,
    ExecutedBy
FROM ccams.SurveillanceRun
WHERE BatchId = '20250617'  -- Replace with current batch date
ORDER BY StartTime DESC;

-- Get surveillance run details for specific pattern
SELECT 
    sr.SurvRunId,
    sc.SurveillanceName,
    sr.BatchId,
    sr.RunStatus,
    sr.RecordCount,
    sr.AlertCount
FROM ccams.SurveillanceRun sr
JOIN ccams.SurveillanceCode sc ON sr.SurveillanceId = sc.SurveillanceId
WHERE sr.SurveillanceId = 11  -- Cross Product Manipulation
ORDER BY sr.StartTime DESC;

-- Check failed surveillance runs
SELECT 
    SurvRunId,
    SurveillanceId,
    BatchId,
    RunStatus,
    ErrorMessage,
    StartTime
FROM ccams.SurveillanceRun
WHERE RunStatus = 'Failed'
AND BatchId >= '20250601'
ORDER BY StartTime DESC;

-- -----------------------------------------------------------------------------
-- 2. ALERT MANAGEMENT
-- -----------------------------------------------------------------------------

-- View alerts generated by surveillance patterns
SELECT 
    ad.AlertId,
    ad.AlertDate,
    ad.AlertTime,
    sc.SurveillanceName,
    ad.TraderName,
    ad.DeskName,
    ad.AssetClass,
    ad.AlertScore
FROM ccams.AlertDetail ad
JOIN ccams.SurveillanceCode sc ON ad.SurveillanceId = sc.SurveillanceId
WHERE ad.AlertDate = '2025-06-17'  -- Replace with target date
ORDER BY ad.AlertScore DESC;

-- Count alerts by surveillance pattern
SELECT 
    sc.SurveillanceName,
    COUNT(*) as AlertCount,
    AVG(ad.AlertScore) as AvgScore
FROM ccams.AlertDetail ad
JOIN ccams.SurveillanceCode sc ON ad.SurveillanceId = sc.SurveillanceId
WHERE ad.AlertDate >= '2025-06-01'
GROUP BY sc.SurveillanceName
ORDER BY AlertCount DESC;

-- High priority alerts (score > threshold)
SELECT 
    ad.AlertId,
    ad.AlertDate,
    sc.SurveillanceName,
    ad.TraderName,
    ad.AlertScore,
    ad.AlertDescription
FROM ccams.AlertDetail ad
JOIN ccams.SurveillanceCode sc ON ad.SurveillanceId = sc.SurveillanceId
WHERE ad.AlertScore > 85  -- Adjust threshold as needed
AND ad.AlertDate >= DATEADD(day, -7, GETDATE())
ORDER BY ad.AlertScore DESC;

-- -----------------------------------------------------------------------------
-- 3. DATA QUALITY MONITORING
-- -----------------------------------------------------------------------------

-- Check data exceptions
SELECT 
    ExceptionId,
    BatchId,
    SurveillanceId,
    ExceptionType,
    ExceptionMessage,
    RecordCount,
    CreatedTime
FROM ccams.DataException
WHERE BatchId = '20250617'  -- Replace with current batch
ORDER BY CreatedTime DESC;

-- Data load status verification
SELECT 
    LoadName,
    LoadStatus,
    RecordCount,
    LoadStartTime,
    LoadEndTime,
    BatchId
FROM TDRLoadStatusView
WHERE BatchId = '20250617'  -- Replace with current batch
AND LoadStatus IN ('Success', 'Failed', 'Running');

-- Missing data loads check
SELECT DISTINCT
    LoadName,
    BatchId,
    CASE 
        WHEN LoadStatus IS NULL THEN 'Not Started'
        ELSE LoadStatus 
    END as Status
FROM TDRLoadStatusView
WHERE BatchId = '20250617'  -- Replace with current batch
AND LoadName IN ('CM FX Trades', 'NYB FX Trades', 'NYB Swap Trades', 'CM Swap Trades');

-- -----------------------------------------------------------------------------
-- 4. THRESHOLD MANAGEMENT
-- -----------------------------------------------------------------------------

-- View current thresholds for surveillance patterns
SELECT 
    ts.SurveillanceId,
    sc.SurveillanceName,
    ts.ThresholdName,
    ts.ThresholdValue,
    ts.EffectiveDate,
    ts.ExpiryDate
FROM ccams.ThresholdSet ts
JOIN ccams.SurveillanceCode sc ON ts.SurveillanceId = sc.SurveillanceId
WHERE ts.EffectiveDate <= GETDATE()
AND (ts.ExpiryDate IS NULL OR ts.ExpiryDate > GETDATE())
ORDER BY ts.SurveillanceId;

-- Threshold lookup for specific pattern
SELECT 
    ThresholdText,
    ThresholdValue,
    EffectiveDate
FROM ccams.ThresholdSet
WHERE SurveillanceId = 11  -- Cross Product Manipulation
AND EffectiveDate <= GETDATE()
AND (ExpiryDate IS NULL OR ExpiryDate > GETDATE());

-- -----------------------------------------------------------------------------
-- 5. TRADING DATA ANALYSIS
-- -----------------------------------------------------------------------------

-- FX Trade data summary (from DenodoForeignExchangeView)
SELECT 
    TradingDate,
    BusinessUnit,
    AssetClass,
    COUNT(*) as TradeCount,
    SUM(TradeAmount) as TotalAmount,
    COUNT(DISTINCT TraderId) as UniqueTraders
FROM DenodoForeignExchangeView
WHERE TradingDate = '2025-06-17'  -- Replace with target date
GROUP BY TradingDate, BusinessUnit, AssetClass
ORDER BY TotalAmount DESC;

-- Fixed Income trade analysis (from DenodoFixedIncomeView)
SELECT 
    TradingDate,
    BusinessUnit,
    InstrumentType,
    COUNT(*) as TradeCount,
    AVG(TradePrice) as AvgPrice,
    COUNT(DISTINCT TraderId) as UniqueTraders
FROM DenodoFixedIncomeView
WHERE TradingDate = '2025-06-17'  -- Replace with target date
GROUP BY TradingDate, BusinessUnit, InstrumentType;

-- Order data analysis for spoofing detection
SELECT 
    OrderDate,
    TraderId,
    InstrumentId,
    COUNT(*) as OrderCount,
    COUNT(CASE WHEN OrderStatus = 'Cancelled' THEN 1 END) as CancelledOrders,
    CAST(COUNT(CASE WHEN OrderStatus = 'Cancelled' THEN 1 END) as FLOAT) / COUNT(*) * 100 as CancelRatio
FROM dbo.vw_OrderOutbound
WHERE OrderDate = '2025-06-17'  -- Replace with target date
GROUP BY OrderDate, TraderId, InstrumentId
HAVING COUNT(*) > 10  -- Focus on active traders
ORDER BY CancelRatio DESC;

-- -----------------------------------------------------------------------------
-- 6. PERFORMANCE MONITORING
-- -----------------------------------------------------------------------------

-- Pipeline execution performance
SELECT 
    sr.SurveillanceId,
    sc.SurveillanceName,
    sr.BatchId,
    sr.StartTime,
    sr.EndTime,
    DATEDIFF(minute, sr.StartTime, sr.EndTime) as DurationMinutes,
    sr.RecordCount,
    sr.AlertCount
FROM ccams.SurveillanceRun sr
JOIN ccams.SurveillanceCode sc ON sr.SurveillanceId = sc.SurveillanceId
WHERE sr.BatchId >= '20250601'
AND sr.RunStatus = 'Completed'
ORDER BY DurationMinutes DESC;

-- Daily processing summary
SELECT 
    BatchId,
    COUNT(*) as TotalRuns,
    COUNT(CASE WHEN RunStatus = 'Completed' THEN 1 END) as SuccessfulRuns,
    COUNT(CASE WHEN RunStatus = 'Failed' THEN 1 END) as FailedRuns,
    SUM(RecordCount) as TotalRecordsProcessed,
    SUM(AlertCount) as TotalAlertsGenerated
FROM ccams.SurveillanceRun
WHERE BatchId >= '20250601'
GROUP BY BatchId
ORDER BY BatchId DESC;

-- -----------------------------------------------------------------------------
-- 7. USER ACCESS AND AUDIT
-- -----------------------------------------------------------------------------

-- Surveillance execution audit
SELECT 
    sr.SurvRunId,
    sc.SurveillanceName,
    sr.ExecutedBy,
    sr.ExecutionReason,
    sr.StartTime,
    sr.RunStatus
FROM ccams.SurveillanceRun sr
JOIN ccams.SurveillanceCode sc ON sr.SurveillanceId = sc.SurveillanceId
WHERE sr.StartTime >= DATEADD(day, -7, GETDATE())
ORDER BY sr.StartTime DESC;

-- -----------------------------------------------------------------------------
-- 8. BUSINESS UNIT ANALYSIS
-- -----------------------------------------------------------------------------

-- Alert distribution by business unit and asset class
SELECT 
    BusinessUnit,
    AssetClass,
    COUNT(*) as AlertCount,
    COUNT(DISTINCT TraderId) as UniqueTraders,
    AVG(AlertScore) as AvgScore
FROM ccams.AlertDetail
WHERE AlertDate >= DATEADD(day, -30, GETDATE())
GROUP BY BusinessUnit, AssetClass
ORDER BY AlertCount DESC;

-- Surveillance coverage by business unit
SELECT 
    sc.SurveillanceName,
    ad.BusinessUnit,
    COUNT(*) as AlertCount,
    MIN(ad.AlertDate) as FirstAlert,
    MAX(ad.AlertDate) as LastAlert
FROM ccams.AlertDetail ad
JOIN ccams.SurveillanceCode sc ON ad.SurveillanceId = sc.SurveillanceId
WHERE ad.AlertDate >= DATEADD(day, -30, GETDATE())
GROUP BY sc.SurveillanceName, ad.BusinessUnit
ORDER BY sc.SurveillanceName, AlertCount DESC;

-- -----------------------------------------------------------------------------
-- 9. DATA FRESHNESS CHECKS
-- -----------------------------------------------------------------------------

-- Check latest data availability
SELECT 
    'FX Trades' as DataSource,
    MAX(TradingDate) as LatestDate,
    COUNT(*) as RecordCount
FROM DenodoForeignExchangeView
WHERE TradingDate >= DATEADD(day, -1, GETDATE())

UNION ALL

SELECT 
    'FI Trades' as DataSource,
    MAX(TradingDate) as LatestDate,
    COUNT(*) as RecordCount
FROM DenodoFixedIncomeView
WHERE TradingDate >= DATEADD(day, -1, GETDATE())

UNION ALL

SELECT 
    'Order Data' as DataSource,
    MAX(OrderDate) as LatestDate,
    COUNT(*) as RecordCount
FROM dbo.vw_OrderOutbound
WHERE OrderDate >= DATEADD(day, -1, GETDATE());

-- -----------------------------------------------------------------------------
-- 10. TROUBLESHOOTING QUERIES
-- -----------------------------------------------------------------------------

-- Find surveillance runs with zero alerts (potential issues)
SELECT 
    sr.SurvRunId,
    sc.SurveillanceName,
    sr.BatchId,
    sr.RecordCount,
    sr.AlertCount,
    sr.RunStatus
FROM ccams.SurveillanceRun sr
JOIN ccams.SurveillanceCode sc ON sr.SurveillanceId = sc.SurveillanceId
WHERE sr.AlertCount = 0
AND sr.RecordCount > 0
AND sr.BatchId >= '20250601'
ORDER BY sr.BatchId DESC;

-- Check for duplicate surveillance runs
SELECT 
    SurveillanceId,
    BatchId,
    COUNT(*) as RunCount
FROM ccams.SurveillanceRun
WHERE BatchId = '20250617'  -- Replace with current batch
GROUP BY SurveillanceId, BatchId
HAVING COUNT(*) > 1;

-- Identify long-running surveillance patterns
SELECT 
    sc.SurveillanceName,
    AVG(DATEDIFF(minute, sr.StartTime, sr.EndTime)) as AvgDurationMinutes,
    MAX(DATEDIFF(minute, sr.StartTime, sr.EndTime)) as MaxDurationMinutes
FROM ccams.SurveillanceRun sr
JOIN ccams.SurveillanceCode sc ON sr.SurveillanceId = sc.SurveillanceId
WHERE sr.BatchId >= '20250601'
AND sr.RunStatus = 'Completed'
GROUP BY sc.SurveillanceName
ORDER BY AvgDurationMinutes DESC;

-- =============================================================================
-- STORED PROCEDURE EXAMPLES (Based on documentation)
-- =============================================================================

-- Execute surveillance run creation procedure
EXEC SP_GetNewSurveillanceRun 
    @dataSetRunId = @varDsRunId,
    @surveillanceName = @varsurveillanceName,
    @isScheduled = @varIsScheduled,
    @execStartTime = @varexecStartTime,
    @thresholdtext = @varthresholdtext,
    @runOutputLocation = @varrunOutputLocation,
    @executor = @varexecutor,
    @requestor = @varrequestor,
    @execReason = @varexecReason,
    @executinguser = @varexecutingUser,
    @Scenario_Id = @varScenario_Id,
    @survRunId = @varSurvRunId OUTPUT;

-- Complete surveillance run procedure
EXEC SP_CompleteSurvRun 
    @SurvRunId = @varSurvRunId,
    @Status = 'Y',  -- 'Y' for success, 'N' for failure
    @EndTime = GETDATE();

-- Get new dataset run ID
EXEC SP_GetNewDataSetRunId 
    @DataSetRunId = @varDatasetRunId OUTPUT;

-- Check records in data exception
EXEC CheckRecordsInDataException 
    @BatchId = @varCOB,
    @SurveillanceId = 11;  -- Replace with specific surveillance ID

How do you want the TDR job trigger to be handled after our analytics pipeline completes?
Currently, the PL_TDRRequest pipeline triggers the TDR job again after analytics completion. Do you still need this, or will TWS handle this trigger separately?

2. TWS Integration Coordination:

Have you already coordinated with the TWS team to integrate our "MasterPL for 2A 2B Patterns" pipeline?
Should TWS directly call our "MasterPL for 2A 2B Patterns" pipeline after your EBS job completes, or do you still need the intermediate PL_TDRRequest pipeline?
